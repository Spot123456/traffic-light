
traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001576  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d1  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0b  00000000  00000000  00002a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000704  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  74:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
void APP_init()
{
	// in normal mode
	
	//for cars
	Led_init(Green_led_Car,Led_car_port);//set port A pin 0 as output for green led of Normal_mode
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 ca 01 	call	0x394	; 0x394 <Led_init>
	Led_init(Yellow_led_car,Led_car_port);//set port A pin 1 as output for green led of Normal_mode
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 ca 01 	call	0x394	; 0x394 <Led_init>
	Led_init(Red_led_car,Led_car_port);//set port A pin 2 as output for green led of Normal_mode
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 ca 01 	call	0x394	; 0x394 <Led_init>
	
	// for pedestrian
	Led_init(Green_led_Pedestrian,Led_pedestrian_port);//set port A pin 0 as output for green led of Normal_mode
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 ca 01 	call	0x394	; 0x394 <Led_init>
	Led_init(Yellow_led_Pedestrian,Led_pedestrian_port);//set port A pin 1 as output for green led of Normal_mode
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 ca 01 	call	0x394	; 0x394 <Led_init>
	Led_init(Red_led_Pedestrian,Led_pedestrian_port);//set port A pin 2 as output for green led of Normal_mode
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 ca 01 	call	0x394	; 0x394 <Led_init>
	
	//button init
	Button_init(pin2,PORTD);
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 ef 01 	call	0x3de	; 0x3de <Button_init>
	
	Timer0_init(normal); // set timer in normal mode
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 0e 03 	call	0x61c	; 0x61c <Timer0_init>
	timer0_start(0x00); // set initial value 0 for timer0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 33 03 	call	0x666	; 0x666 <timer0_start>
	EXT_Interrupt_init(); // clear flag before start
  c0:	0e 94 00 03 	call	0x600	; 0x600 <EXT_Interrupt_init>
	EXT_Global_Interrupt(); // open global interrupt
  c4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <EXT_Global_Interrupt>
	EXT_Enable_Int0(); // enable interrupt flag for int0
  c8:	0e 94 0a 03 	call	0x614	; 0x614 <EXT_Enable_Int0>
  cc:	08 95       	ret

000000ce <APP_start>:
		
		/************************************************************************/
		/*                   Normal Mode                                        */
		/************************************************************************/
		
		if (mode==Normal_mode)
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	81 11       	cpse	r24, r1
  d4:	a3 c0       	rjmp	.+326    	; 0x21c <APP_start+0x14e>
		{
			Led_on(Red_led_Pedestrian,Led_pedestrian_port); //pedestrian red on 
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			
			Led_on(Green_led_Car,Led_car_port); //green on car
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			
			color= Green ;   //
  e6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <color>
			for (i=0;i<50;i++)
  ea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
  ee:	0f c0       	rjmp	.+30     	; 0x10e <APP_start+0x40>
			{
				if(mode==pedestrian_mode){break;}
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	79 f0       	breq	.+30     	; 0x116 <APP_start+0x48>
				Timer_delay(100);  //0.1 sec
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	88 ec       	ldi	r24, 0xC8	; 200
  fe:	92 e4       	ldi	r25, 0x42	; 66
 100:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			Led_on(Red_led_Pedestrian,Led_pedestrian_port); //pedestrian red on 
			
			Led_on(Green_led_Car,Led_car_port); //green on car
			
			color= Green ;   //
			for (i=0;i<50;i++)
 104:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 10e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 112:	82 33       	cpi	r24, 0x32	; 50
 114:	68 f3       	brcs	.-38     	; 0xf0 <APP_start+0x22>
			{
				if(mode==pedestrian_mode){break;}
				Timer_delay(100);  //0.1 sec
				
			}
				if (mode==pedestrian_mode){continue;}
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	c1 f2       	breq	.-80     	; 0xce <APP_start>
				led_off(Green_led_Car,Led_car_port); // green off car
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
				led_blink(Yellow_led_car,Led_car_port); //blink yellow car
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
			
			
				// yellow blink for 0.1 on and 0.1 off so half (I green) need i.e --> (i<24.5 = 25)
			color=Yellow; //color flag = yellow
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <color>
			for (i=0;i<25;i++)
 134:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 138:	13 c0       	rjmp	.+38     	; 0x160 <APP_start+0x92>
			{
				led_blink(Yellow_led_car,Led_car_port); //blink yellow traffic car
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
				if(mode==pedestrian_mode){break;} // if pressed out of loop
 142:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	79 f0       	breq	.+30     	; 0x168 <APP_start+0x9a>
					Timer_delay(1);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	9f e3       	ldi	r25, 0x3F	; 63
 152:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
				led_blink(Yellow_led_car,Led_car_port); //blink yellow car
			
			
				// yellow blink for 0.1 on and 0.1 off so half (I green) need i.e --> (i<24.5 = 25)
			color=Yellow; //color flag = yellow
			for (i=0;i<25;i++)
 156:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 160:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 164:	89 31       	cpi	r24, 0x19	; 25
 166:	48 f3       	brcs	.-46     	; 0x13a <APP_start+0x6c>
			{
				led_blink(Yellow_led_car,Led_car_port); //blink yellow traffic car
				if(mode==pedestrian_mode){break;} // if pressed out of loop
					Timer_delay(1);
			}
			if(mode==pedestrian_mode){continue;} //  if pressed out from while and go to interrupt (pedestrian mode)
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	09 f4       	brne	.+2      	; 0x172 <APP_start+0xa4>
 170:	ae cf       	rjmp	.-164    	; 0xce <APP_start>
			led_off(Yellow_led_car,Led_car_port); // yellow traffic care off
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			Led_on(Red_led_car,Led_car_port); // red traffic on 
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			
			
			color=red;            //color flag = red
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <color>
			for(i=0;i<50;i++)
 188:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 18c:	0f c0       	rjmp	.+30     	; 0x1ac <APP_start+0xde>
			{
				if(mode==pedestrian_mode){break;} //if pressed push button out from loop
 18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	79 f0       	breq	.+30     	; 0x1b4 <APP_start+0xe6>
					Timer_delay(100); //0.1 sec  wait 0.1 sec
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	88 ec       	ldi	r24, 0xC8	; 200
 19c:	92 e4       	ldi	r25, 0x42	; 66
 19e:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			led_off(Yellow_led_car,Led_car_port); // yellow traffic care off
			Led_on(Red_led_car,Led_car_port); // red traffic on 
			
			
			color=red;            //color flag = red
			for(i=0;i<50;i++)
 1a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 1ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 1b0:	82 33       	cpi	r24, 0x32	; 50
 1b2:	68 f3       	brcs	.-38     	; 0x18e <APP_start+0xc0>
			{
				if(mode==pedestrian_mode){break;} //if pressed push button out from loop
					Timer_delay(100); //0.1 sec  wait 0.1 sec
			}
			if(mode==pedestrian_mode){continue;} // out from while and go to interrupt
 1b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f4       	brne	.+2      	; 0x1be <APP_start+0xf0>
 1bc:	88 cf       	rjmp	.-240    	; 0xce <APP_start>
			led_off(Red_led_car,Led_car_port); // off traffic red led
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			led_blink(Yellow_led_car,Led_car_port); // blink yellow led
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
			
			color=Yellow;  // color flag = yellow
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <color>
			for(i=0;i<25;i++)
 1d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <APP_start+0x132>
			{
				led_blink(Yellow_led_car,Led_car_port);  //blink yellow traffic car
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
				if(mode==pedestrian_mode){break;}
 1e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	79 f0       	breq	.+30     	; 0x208 <APP_start+0x13a>
					Timer_delay(1);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	9f e3       	ldi	r25, 0x3F	; 63
 1f2:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			if(mode==pedestrian_mode){continue;} // out from while and go to interrupt
			led_off(Red_led_car,Led_car_port); // off traffic red led
			led_blink(Yellow_led_car,Led_car_port); // blink yellow led
			
			color=Yellow;  // color flag = yellow
			for(i=0;i<25;i++)
 1f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 200:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 204:	89 31       	cpi	r24, 0x19	; 25
 206:	48 f3       	brcs	.-46     	; 0x1da <APP_start+0x10c>
			{
				led_blink(Yellow_led_car,Led_car_port);  //blink yellow traffic car
				if(mode==pedestrian_mode){break;}
					Timer_delay(1);
			}
			if(mode==pedestrian_mode){continue;}
 208:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	09 f4       	brne	.+2      	; 0x212 <APP_start+0x144>
 210:	5e cf       	rjmp	.-324    	; 0xce <APP_start>
			led_off(Yellow_led_car,Led_car_port); // turn off yellow traffic
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
 21a:	59 cf       	rjmp	.-334    	; 0xce <APP_start>
		}
		
	else if (mode==pedestrian_mode)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	09 f0       	breq	.+2      	; 0x222 <APP_start+0x154>
 220:	56 cf       	rjmp	.-340    	; 0xce <APP_start>
		/************************************************************************/
		/*                   pedestrian Mode                                    */
		/************************************************************************/
		//if the button pressed we go to pedestrian mode so we need to check the color flag to order the right one 
		
		if(color==red)           // if color flag == red
 222:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <color>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	09 f0       	breq	.+2      	; 0x22c <APP_start+0x15e>
 22a:	41 c0       	rjmp	.+130    	; 0x2ae <APP_start+0x1e0>
		{
			led_off(Red_led_Pedestrian,Led_pedestrian_port); // turn off led pedestrian 
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			Led_on(Green_led_Pedestrian,Led_pedestrian_port); // turn on green pedestrian
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			Led_on(Red_led_car,Led_car_port); // red traffic light on 
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			for(i=0;i<50;i++) // wait 0.1 * 50 = 5 sec
 242:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 246:	0b c0       	rjmp	.+22     	; 0x25e <APP_start+0x190>
			{
				Timer_delay(100); 
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	88 ec       	ldi	r24, 0xC8	; 200
 24e:	92 e4       	ldi	r25, 0x42	; 66
 250:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
		if(color==red)           // if color flag == red
		{
			led_off(Red_led_Pedestrian,Led_pedestrian_port); // turn off led pedestrian 
			Led_on(Green_led_Pedestrian,Led_pedestrian_port); // turn on green pedestrian
			Led_on(Red_led_car,Led_car_port); // red traffic light on 
			for(i=0;i<50;i++) // wait 0.1 * 50 = 5 sec
 254:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 25e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 262:	82 33       	cpi	r24, 0x32	; 50
 264:	88 f3       	brcs	.-30     	; 0x248 <APP_start+0x17a>
			{
				Timer_delay(100); 
			}
			led_off(Red_led_car,Led_car_port); //red traffic off
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			led_off(Green_led_Pedestrian,Led_pedestrian_port); // green pedestrian on
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			for(i=0;i<25;i++)
 276:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <APP_start+0x1d4>
			{
				led_blink(Yellow_led_car,Led_car_port); // blink yellow led car
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
				led_blink(Yellow_led_Pedestrian,Led_pedestrian_port); // blink yellow led pedestrian
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
				Timer_delay(1);	
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	9f e3       	ldi	r25, 0x3F	; 63
 294:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			{
				Timer_delay(100); 
			}
			led_off(Red_led_car,Led_car_port); //red traffic off
			led_off(Green_led_Pedestrian,Led_pedestrian_port); // green pedestrian on
			for(i=0;i<25;i++)
 298:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 2a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	48 f3       	brcs	.-46     	; 0x27c <APP_start+0x1ae>
			{
				led_blink(Yellow_led_car,Led_car_port); // blink yellow led car
				led_blink(Yellow_led_Pedestrian,Led_pedestrian_port); // blink yellow led pedestrian
				Timer_delay(1);	
			}
			mode=Normal_mode;
 2aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			
		}
		if(color == Green ||color== Yellow)
 2ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <color>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <APP_start+0x1ea>
 2b6:	0b cf       	rjmp	.-490    	; 0xce <APP_start>
		{
			led_off(Green_led_Car,Led_car_port);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			led_off(Yellow_led_car,Led_car_port);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			
			Led_on(Red_led_Pedestrian,Led_pedestrian_port);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			Timer_delay(5000);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	70 e4       	ldi	r23, 0x40	; 64
 2d4:	8c e9       	ldi	r24, 0x9C	; 156
 2d6:	95 e4       	ldi	r25, 0x45	; 69
 2d8:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			led_off(Red_led_Pedestrian,Led_pedestrian_port);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
		//	led_blink(Yellow_led_car,Led_car_port);
			//led_blink(Yellow_led_Pedestrian,Led_pedestrian_port);
			for(i=0 ; i< 25 ; i++)
 2e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 2e8:	13 c0       	rjmp	.+38     	; 0x310 <APP_start+0x242>
			{
				led_blink(Yellow_led_car,Led_car_port); 
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
				led_blink(Yellow_led_Pedestrian,Led_pedestrian_port); 
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <led_blink>
				Timer_delay(1);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	9f e3       	ldi	r25, 0x3F	; 63
 302:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			Led_on(Red_led_Pedestrian,Led_pedestrian_port);
			Timer_delay(5000);
			led_off(Red_led_Pedestrian,Led_pedestrian_port);
		//	led_blink(Yellow_led_car,Led_car_port);
			//led_blink(Yellow_led_Pedestrian,Led_pedestrian_port);
			for(i=0 ; i< 25 ; i++)
 306:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 310:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 314:	89 31       	cpi	r24, 0x19	; 25
 316:	48 f3       	brcs	.-46     	; 0x2ea <APP_start+0x21c>
			{
				led_blink(Yellow_led_car,Led_car_port); 
				led_blink(Yellow_led_Pedestrian,Led_pedestrian_port); 
				Timer_delay(1);
			}
			led_off(Yellow_led_car,Led_car_port);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			led_off(Yellow_led_Pedestrian,Led_pedestrian_port);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			Led_on(Green_led_Pedestrian,Led_pedestrian_port);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			Led_on(Red_led_car,Led_car_port);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
			for(i=0 ; i< 50 ; i++)
 338:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 33c:	0b c0       	rjmp	.+22     	; 0x354 <APP_start+0x286>
			{
				Timer_delay(100);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	88 ec       	ldi	r24, 0xC8	; 200
 344:	92 e4       	ldi	r25, 0x42	; 66
 346:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
			}
			led_off(Yellow_led_car,Led_car_port);
			led_off(Yellow_led_Pedestrian,Led_pedestrian_port);
			Led_on(Green_led_Pedestrian,Led_pedestrian_port);
			Led_on(Red_led_car,Led_car_port);
			for(i=0 ; i< 50 ; i++)
 34a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 354:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 358:	82 33       	cpi	r24, 0x32	; 50
 35a:	88 f3       	brcs	.-30     	; 0x33e <APP_start+0x270>
			{
				Timer_delay(100);
			}
			led_off(Green_led_Pedestrian,Led_pedestrian_port);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			led_off(Red_led_car,Led_car_port);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
			mode=Normal_mode;
 36c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 370:	ae ce       	rjmp	.-676    	; 0xce <APP_start>

00000372 <__vector_1>:
		
	}
	
}
ISR(EXTI_INT_0)
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	8f 93       	push	r24
	mode=pedestrian_mode;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	GIFR |=(1>>6); //clear flag 	
 384:	8a b7       	in	r24, 0x3a	; 58
 386:	8a bf       	out	0x3a, r24	; 58
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <Led_init>:
#include "led.h"
//#include <avr/delay.h>

void Led_init(uint8 pin_id , uint8 port_id)
{
	DIO_Set_Pin_Direction(pin_id,port_id,output);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_Set_Pin_Direction>
 39a:	08 95       	ret

0000039c <Led_on>:
}

void Led_on(uint8 pin_id , uint8 port_id)
{
	DIO_Set_Pin_Val(pin_id,port_id,HIGH);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_Set_Pin_Val>
 3a2:	08 95       	ret

000003a4 <led_off>:
}

void led_off(uint8 pin_id , uint8 port_id)
{
	DIO_Set_Pin_Val(pin_id,port_id,LOW);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_Set_Pin_Val>
 3aa:	08 95       	ret

000003ac <led_blink>:
}

void led_blink(uint8 pin_id , uint8 port_id)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	c8 2f       	mov	r28, r24
 3b2:	d6 2f       	mov	r29, r22
	Led_on(pin_id,port_id);
 3b4:	0e 94 ce 01 	call	0x39c	; 0x39c <Led_on>
	Timer_delay(100);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	88 ec       	ldi	r24, 0xC8	; 200
 3be:	92 e4       	ldi	r25, 0x42	; 66
 3c0:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
	//_delay_ms(100);
	led_off(pin_id,port_id);
 3c4:	6d 2f       	mov	r22, r29
 3c6:	8c 2f       	mov	r24, r28
 3c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_off>
	Timer_delay(100);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	88 ec       	ldi	r24, 0xC8	; 200
 3d2:	92 e4       	ldi	r25, 0x42	; 66
 3d4:	0e 94 35 03 	call	0x66a	; 0x66a <Timer_delay>
	//_delay_ms(100);
	
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <Button_init>:

#include "Button.h"

void Button_init(uint8 pin_id, uint8 port_id)
{
	DIO_Set_Pin_Direction(pin_id,port_id,input);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_Set_Pin_Direction>
 3e4:	08 95       	ret

000003e6 <main>:
	/* initializations */
	//Declaring and initialize variables

	//write all instructions that will run only one time
	//set direction of pin 0 in port A to output
	APP_init();
 3e6:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
 3ea:	0e 94 67 00 	call	0xce	; 0xce <APP_start>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <DIO_Set_Pin_Direction>:

}

void DIO_Set_Pin_Direction(DIO_Pin_ID PIN_ID ,DIO_PORT_ID PORT_ID , DIO_Direction Direction) 
{
	if(PORT_ID<=PORTD && PIN_ID<=pin7)
 3f4:	64 30       	cpi	r22, 0x04	; 4
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <DIO_Set_Pin_Direction+0x6>
 3f8:	7d c0       	rjmp	.+250    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 3fa:	88 30       	cpi	r24, 0x08	; 8
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	7a c0       	rjmp	.+244    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
	{
		if(Direction==output)
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	b9 f5       	brne	.+110    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		{
			switch(PORT_ID)
 404:	61 30       	cpi	r22, 0x01	; 1
 406:	91 f0       	breq	.+36     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 408:	28 f0       	brcs	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	62 30       	cpi	r22, 0x02	; 2
 40c:	d9 f0       	breq	.+54     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 40e:	63 30       	cpi	r22, 0x03	; 3
 410:	29 f1       	breq	.+74     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 412:	2f c0       	rjmp	.+94     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				case PORTA : Set_Bit(DDRA_REG,PIN_ID)  ; break;
 414:	9a b3       	in	r25, 0x1a	; 26
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	08 2e       	mov	r0, r24
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	29 2b       	or	r18, r25
 428:	2a bb       	out	0x1a, r18	; 26
 42a:	23 c0       	rjmp	.+70     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
				case PORTB : Set_Bit(DDRB_REG,PIN_ID)  ; break;
 42c:	97 b3       	in	r25, 0x17	; 23
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	08 2e       	mov	r0, r24
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	29 2b       	or	r18, r25
 440:	27 bb       	out	0x17, r18	; 23
 442:	17 c0       	rjmp	.+46     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
				case PORTC : Set_Bit(DDRC_REG,PIN_ID)  ; break;
 444:	94 b3       	in	r25, 0x14	; 20
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	08 2e       	mov	r0, r24
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	29 2b       	or	r18, r25
 458:	24 bb       	out	0x14, r18	; 20
 45a:	0b c0       	rjmp	.+22     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
				case PORTD : Set_Bit(DDRD_REG,PIN_ID)  ; break;
 45c:	91 b3       	in	r25, 0x11	; 17
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	08 2e       	mov	r0, r24
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	29 2b       	or	r18, r25
 470:	21 bb       	out	0x11, r18	; 17
				
			}
		}
		
		
		if(Direction==input)
 472:	41 11       	cpse	r20, r1
 474:	3f c0       	rjmp	.+126    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
		{
			switch(PORT_ID)
 476:	61 30       	cpi	r22, 0x01	; 1
 478:	a1 f0       	breq	.+40     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 47a:	28 f0       	brcs	.+10     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47c:	62 30       	cpi	r22, 0x02	; 2
 47e:	f9 f0       	breq	.+62     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 480:	63 30       	cpi	r22, 0x03	; 3
 482:	59 f1       	breq	.+86     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 484:	08 95       	ret
			{
				case PORTA : Clear_Bit(DDRA_REG,PIN_ID)  ; break;
 486:	4a b3       	in	r20, 0x1a	; 26
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 498:	cb 01       	movw	r24, r22
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	8a bb       	out	0x1a, r24	; 26
 4a0:	08 95       	ret
				case PORTB : Clear_Bit(DDRB_REG,PIN_ID)  ; break;
 4a2:	47 b3       	in	r20, 0x17	; 23
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	87 bb       	out	0x17, r24	; 23
 4bc:	08 95       	ret
				case PORTC : Clear_Bit(DDRC_REG,PIN_ID)  ; break;
 4be:	44 b3       	in	r20, 0x14	; 20
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	b9 01       	movw	r22, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	cb 01       	movw	r24, r22
 4d2:	80 95       	com	r24
 4d4:	84 23       	and	r24, r20
 4d6:	84 bb       	out	0x14, r24	; 20
 4d8:	08 95       	ret
				case PORTD : Clear_Bit(DDRD_REG,PIN_ID)  ; break;
 4da:	41 b3       	in	r20, 0x11	; 17
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4ec:	cb 01       	movw	r24, r22
 4ee:	80 95       	com	r24
 4f0:	84 23       	and	r24, r20
 4f2:	81 bb       	out	0x11, r24	; 17
 4f4:	08 95       	ret

000004f6 <DIO_Set_Pin_Val>:
	}
}

void DIO_Set_Pin_Val(DIO_Pin_ID PIN_ID ,DIO_PORT_ID PORT_ID , DIO_Value value)
{
	if(PORT_ID<=PORTD && PIN_ID <=pin7)
 4f6:	64 30       	cpi	r22, 0x04	; 4
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <DIO_Set_Pin_Val+0x6>
 4fa:	7d c0       	rjmp	.+250    	; 0x5f6 <DIO_Set_Pin_Val+0x100>
 4fc:	88 30       	cpi	r24, 0x08	; 8
 4fe:	08 f0       	brcs	.+2      	; 0x502 <DIO_Set_Pin_Val+0xc>
 500:	7a c0       	rjmp	.+244    	; 0x5f6 <DIO_Set_Pin_Val+0x100>
	{
		if (value == HIGH)
 502:	41 30       	cpi	r20, 0x01	; 1
 504:	b9 f5       	brne	.+110    	; 0x574 <DIO_Set_Pin_Val+0x7e>
		{
			switch(PORT_ID)
 506:	61 30       	cpi	r22, 0x01	; 1
 508:	91 f0       	breq	.+36     	; 0x52e <DIO_Set_Pin_Val+0x38>
 50a:	28 f0       	brcs	.+10     	; 0x516 <DIO_Set_Pin_Val+0x20>
 50c:	62 30       	cpi	r22, 0x02	; 2
 50e:	d9 f0       	breq	.+54     	; 0x546 <DIO_Set_Pin_Val+0x50>
 510:	63 30       	cpi	r22, 0x03	; 3
 512:	29 f1       	breq	.+74     	; 0x55e <DIO_Set_Pin_Val+0x68>
 514:	2f c0       	rjmp	.+94     	; 0x574 <DIO_Set_Pin_Val+0x7e>
			{
				case PORTA : Set_Bit(PORTA_REG,PIN_ID); break;
 516:	9b b3       	in	r25, 0x1b	; 27
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	08 2e       	mov	r0, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_Set_Pin_Val+0x2e>
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_Set_Pin_Val+0x2a>
 528:	29 2b       	or	r18, r25
 52a:	2b bb       	out	0x1b, r18	; 27
 52c:	23 c0       	rjmp	.+70     	; 0x574 <DIO_Set_Pin_Val+0x7e>
				case PORTB : Set_Bit(PORTB_REG,PIN_ID); break;
 52e:	98 b3       	in	r25, 0x18	; 24
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	08 2e       	mov	r0, r24
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_Set_Pin_Val+0x46>
 538:	22 0f       	add	r18, r18
 53a:	33 1f       	adc	r19, r19
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_Set_Pin_Val+0x42>
 540:	29 2b       	or	r18, r25
 542:	28 bb       	out	0x18, r18	; 24
 544:	17 c0       	rjmp	.+46     	; 0x574 <DIO_Set_Pin_Val+0x7e>
				case PORTC : Set_Bit(PORTC_REG,PIN_ID); break;
 546:	95 b3       	in	r25, 0x15	; 21
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	08 2e       	mov	r0, r24
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_Set_Pin_Val+0x5e>
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_Set_Pin_Val+0x5a>
 558:	29 2b       	or	r18, r25
 55a:	25 bb       	out	0x15, r18	; 21
 55c:	0b c0       	rjmp	.+22     	; 0x574 <DIO_Set_Pin_Val+0x7e>
				case PORTD : Set_Bit(PORTD_REG,PIN_ID); break;
 55e:	92 b3       	in	r25, 0x12	; 18
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	08 2e       	mov	r0, r24
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_Set_Pin_Val+0x76>
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_Set_Pin_Val+0x72>
 570:	29 2b       	or	r18, r25
 572:	22 bb       	out	0x12, r18	; 18
			}
		}
		
		if (value == LOW)
 574:	41 11       	cpse	r20, r1
 576:	3f c0       	rjmp	.+126    	; 0x5f6 <DIO_Set_Pin_Val+0x100>
		{
			switch(PORT_ID)
 578:	61 30       	cpi	r22, 0x01	; 1
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <DIO_Set_Pin_Val+0xae>
 57c:	28 f0       	brcs	.+10     	; 0x588 <DIO_Set_Pin_Val+0x92>
 57e:	62 30       	cpi	r22, 0x02	; 2
 580:	f9 f0       	breq	.+62     	; 0x5c0 <DIO_Set_Pin_Val+0xca>
 582:	63 30       	cpi	r22, 0x03	; 3
 584:	59 f1       	breq	.+86     	; 0x5dc <DIO_Set_Pin_Val+0xe6>
 586:	08 95       	ret
			{
				case PORTA : Clear_Bit(PORTA_REG,PIN_ID); break;
 588:	4b b3       	in	r20, 0x1b	; 27
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_Set_Pin_Val+0xa0>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_Set_Pin_Val+0x9c>
 59a:	cb 01       	movw	r24, r22
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	8b bb       	out	0x1b, r24	; 27
 5a2:	08 95       	ret
				case PORTB : Clear_Bit(PORTB_REG,PIN_ID); break;
 5a4:	48 b3       	in	r20, 0x18	; 24
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	b9 01       	movw	r22, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_Set_Pin_Val+0xbc>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	8a 95       	dec	r24
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_Set_Pin_Val+0xb8>
 5b6:	cb 01       	movw	r24, r22
 5b8:	80 95       	com	r24
 5ba:	84 23       	and	r24, r20
 5bc:	88 bb       	out	0x18, r24	; 24
 5be:	08 95       	ret
				case PORTC : Clear_Bit(PORTC_REG,PIN_ID); break;
 5c0:	45 b3       	in	r20, 0x15	; 21
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	b9 01       	movw	r22, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_Set_Pin_Val+0xd8>
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_Set_Pin_Val+0xd4>
 5d2:	cb 01       	movw	r24, r22
 5d4:	80 95       	com	r24
 5d6:	84 23       	and	r24, r20
 5d8:	85 bb       	out	0x15, r24	; 21
 5da:	08 95       	ret
				case PORTD : Clear_Bit(PORTD_REG,PIN_ID); break;
 5dc:	42 b3       	in	r20, 0x12	; 18
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	b9 01       	movw	r22, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_Set_Pin_Val+0xf4>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	8a 95       	dec	r24
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_Set_Pin_Val+0xf0>
 5ee:	cb 01       	movw	r24, r22
 5f0:	80 95       	com	r24
 5f2:	84 23       	and	r24, r20
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	08 95       	ret

000005f8 <EXT_Global_Interrupt>:
 */ 
#include "interrupt.h"
  
void EXT_Global_Interrupt()
{
	SREG|=(1<<7);	// for global interrupt
 5f8:	8f b7       	in	r24, 0x3f	; 63
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	8f bf       	out	0x3f, r24	; 63
 5fe:	08 95       	ret

00000600 <EXT_Interrupt_init>:
}
void EXT_Interrupt_init()
{
	// we select rising edge interrupt
	MCUCR |=(1<<0);
 600:	85 b7       	in	r24, 0x35	; 53
 602:	81 60       	ori	r24, 0x01	; 1
 604:	85 bf       	out	0x35, r24	; 53
	MCUCR |=(1<<1);
 606:	85 b7       	in	r24, 0x35	; 53
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	85 bf       	out	0x35, r24	; 53
	// we should clear flag of interrupt 0 by (set 1 on it ) 
	GIFR |=(1<<6); 
 60c:	8a b7       	in	r24, 0x3a	; 58
 60e:	80 64       	ori	r24, 0x40	; 64
 610:	8a bf       	out	0x3a, r24	; 58
 612:	08 95       	ret

00000614 <EXT_Enable_Int0>:
}

void EXT_Enable_Int0()
{
	GICR |=(1<<6);
 614:	8b b7       	in	r24, 0x3b	; 59
 616:	80 64       	ori	r24, 0x40	; 64
 618:	8b bf       	out	0x3b, r24	; 59
 61a:	08 95       	ret

0000061c <Timer0_init>:
	while((TIFR0 & (1<<0))==0); // loop 48ala l8ayt lma y7sel OVF (i.e TIFR0 =0x01)
	*value =1 ;
}
void Timer_stop()
{
	TCCR0 =0x00;
 61c:	13 be       	out	0x33, r1	; 51
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	91 f0       	breq	.+36     	; 0x646 <Timer0_init+0x2a>
 622:	28 f4       	brcc	.+10     	; 0x62e <Timer0_init+0x12>
 624:	88 23       	and	r24, r24
 626:	49 f0       	breq	.+18     	; 0x63a <Timer0_init+0x1e>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	49 f0       	breq	.+18     	; 0x63e <Timer0_init+0x22>
 62c:	08 95       	ret
 62e:	84 30       	cpi	r24, 0x04	; 4
 630:	91 f0       	breq	.+36     	; 0x656 <Timer0_init+0x3a>
 632:	68 f0       	brcs	.+26     	; 0x64e <Timer0_init+0x32>
 634:	85 30       	cpi	r24, 0x05	; 5
 636:	99 f0       	breq	.+38     	; 0x65e <Timer0_init+0x42>
 638:	08 95       	ret
 63a:	13 be       	out	0x33, r1	; 51
 63c:	08 95       	ret
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	81 60       	ori	r24, 0x01	; 1
 642:	83 bf       	out	0x33, r24	; 51
 644:	08 95       	ret
 646:	83 b7       	in	r24, 0x33	; 51
 648:	82 60       	ori	r24, 0x02	; 2
 64a:	83 bf       	out	0x33, r24	; 51
 64c:	08 95       	ret
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	83 60       	ori	r24, 0x03	; 3
 652:	83 bf       	out	0x33, r24	; 51
 654:	08 95       	ret
 656:	83 b7       	in	r24, 0x33	; 51
 658:	84 60       	ori	r24, 0x04	; 4
 65a:	83 bf       	out	0x33, r24	; 51
 65c:	08 95       	ret
 65e:	83 b7       	in	r24, 0x33	; 51
 660:	85 60       	ori	r24, 0x05	; 5
 662:	83 bf       	out	0x33, r24	; 51
 664:	08 95       	ret

00000666 <timer0_start>:
 666:	82 bf       	out	0x32, r24	; 50
 668:	08 95       	ret

0000066a <Timer_delay>:
	Timer_stop();
}
*/

void Timer_delay(float msecend)
{
 66a:	cf 92       	push	r12
 66c:	df 92       	push	r13
 66e:	ef 92       	push	r14
 670:	ff 92       	push	r15
 672:	6b 01       	movw	r12, r22
 674:	7c 01       	movw	r14, r24
	unsigned int overflow_counter=0;
	Timer0_init(pre64);
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	0e 94 0e 03 	call	0x61c	; 0x61c <Timer0_init>
//	float timer_clk=64*.000001;
//	float time_overflow=256*timer_clk;
//	msecend=msecend*.001;
	int num_over_flow=(int)(msecend*61);
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	44 e7       	ldi	r20, 0x74	; 116
 682:	52 e4       	ldi	r21, 0x42	; 66
 684:	c7 01       	movw	r24, r14
 686:	b6 01       	movw	r22, r12
 688:	0e 94 bb 03 	call	0x776	; 0x776 <__mulsf3>
 68c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fixsfsi>
}
*/

void Timer_delay(float msecend)
{
	unsigned int overflow_counter=0;
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e0       	ldi	r19, 0x00	; 0
	Timer0_init(pre64);
//	float timer_clk=64*.000001;
//	float time_overflow=256*timer_clk;
//	msecend=msecend*.001;
	int num_over_flow=(int)(msecend*61);
	while (overflow_counter<num_over_flow)
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <Timer_delay+0x3c>
	{
		//wait for flag occurs
		while((TIFR0 &(1<<0))==0);
 696:	03 b6       	in	r0, 0x33	; 51
 698:	00 fe       	sbrs	r0, 0
 69a:	fd cf       	rjmp	.-6      	; 0x696 <Timer_delay+0x2c>
		//clear flag
		TIFR0 |=(1<<0);
 69c:	83 b7       	in	r24, 0x33	; 51
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	83 bf       	out	0x33, r24	; 51
		overflow_counter++;
 6a2:	2f 5f       	subi	r18, 0xFF	; 255
 6a4:	3f 4f       	sbci	r19, 0xFF	; 255
	Timer0_init(pre64);
//	float timer_clk=64*.000001;
//	float time_overflow=256*timer_clk;
//	msecend=msecend*.001;
	int num_over_flow=(int)(msecend*61);
	while (overflow_counter<num_over_flow)
 6a6:	26 17       	cp	r18, r22
 6a8:	37 07       	cpc	r19, r23
 6aa:	a8 f3       	brcs	.-22     	; 0x696 <Timer_delay+0x2c>
		TIFR0 |=(1<<0);
		overflow_counter++;
	}
	overflow_counter=0;
	//set time to 0
	TCCR0 =0x00;
 6ac:	13 be       	out	0x33, r1	; 51
}
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	df 90       	pop	r13
 6b4:	cf 90       	pop	r12
 6b6:	08 95       	ret

000006b8 <__fixsfsi>:
 6b8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 6bc:	68 94       	set
 6be:	b1 11       	cpse	r27, r1
 6c0:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>
 6c4:	08 95       	ret

000006c6 <__fixunssfsi>:
 6c6:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_splitA>
 6ca:	88 f0       	brcs	.+34     	; 0x6ee <__fixunssfsi+0x28>
 6cc:	9f 57       	subi	r25, 0x7F	; 127
 6ce:	98 f0       	brcs	.+38     	; 0x6f6 <__fixunssfsi+0x30>
 6d0:	b9 2f       	mov	r27, r25
 6d2:	99 27       	eor	r25, r25
 6d4:	b7 51       	subi	r27, 0x17	; 23
 6d6:	b0 f0       	brcs	.+44     	; 0x704 <__fixunssfsi+0x3e>
 6d8:	e1 f0       	breq	.+56     	; 0x712 <__fixunssfsi+0x4c>
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a f0       	brmi	.+6      	; 0x6ea <__fixunssfsi+0x24>
 6e4:	ba 95       	dec	r27
 6e6:	c9 f7       	brne	.-14     	; 0x6da <__fixunssfsi+0x14>
 6e8:	14 c0       	rjmp	.+40     	; 0x712 <__fixunssfsi+0x4c>
 6ea:	b1 30       	cpi	r27, 0x01	; 1
 6ec:	91 f0       	breq	.+36     	; 0x712 <__fixunssfsi+0x4c>
 6ee:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_zero>
 6f2:	b1 e0       	ldi	r27, 0x01	; 1
 6f4:	08 95       	ret
 6f6:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_zero>
 6fa:	67 2f       	mov	r22, r23
 6fc:	78 2f       	mov	r23, r24
 6fe:	88 27       	eor	r24, r24
 700:	b8 5f       	subi	r27, 0xF8	; 248
 702:	39 f0       	breq	.+14     	; 0x712 <__fixunssfsi+0x4c>
 704:	b9 3f       	cpi	r27, 0xF9	; 249
 706:	cc f3       	brlt	.-14     	; 0x6fa <__fixunssfsi+0x34>
 708:	86 95       	lsr	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b3 95       	inc	r27
 710:	d9 f7       	brne	.-10     	; 0x708 <__fixunssfsi+0x42>
 712:	3e f4       	brtc	.+14     	; 0x722 <__fixunssfsi+0x5c>
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__fp_split3>:
 724:	57 fd       	sbrc	r21, 7
 726:	90 58       	subi	r25, 0x80	; 128
 728:	44 0f       	add	r20, r20
 72a:	55 1f       	adc	r21, r21
 72c:	59 f0       	breq	.+22     	; 0x744 <__fp_splitA+0x10>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	71 f0       	breq	.+28     	; 0x74e <__fp_splitA+0x1a>
 732:	47 95       	ror	r20

00000734 <__fp_splitA>:
 734:	88 0f       	add	r24, r24
 736:	97 fb       	bst	r25, 7
 738:	99 1f       	adc	r25, r25
 73a:	61 f0       	breq	.+24     	; 0x754 <__fp_splitA+0x20>
 73c:	9f 3f       	cpi	r25, 0xFF	; 255
 73e:	79 f0       	breq	.+30     	; 0x75e <__fp_splitA+0x2a>
 740:	87 95       	ror	r24
 742:	08 95       	ret
 744:	12 16       	cp	r1, r18
 746:	13 06       	cpc	r1, r19
 748:	14 06       	cpc	r1, r20
 74a:	55 1f       	adc	r21, r21
 74c:	f2 cf       	rjmp	.-28     	; 0x732 <__fp_split3+0xe>
 74e:	46 95       	lsr	r20
 750:	f1 df       	rcall	.-30     	; 0x734 <__fp_splitA>
 752:	08 c0       	rjmp	.+16     	; 0x764 <__fp_splitA+0x30>
 754:	16 16       	cp	r1, r22
 756:	17 06       	cpc	r1, r23
 758:	18 06       	cpc	r1, r24
 75a:	99 1f       	adc	r25, r25
 75c:	f1 cf       	rjmp	.-30     	; 0x740 <__fp_splitA+0xc>
 75e:	86 95       	lsr	r24
 760:	71 05       	cpc	r23, r1
 762:	61 05       	cpc	r22, r1
 764:	08 94       	sec
 766:	08 95       	ret

00000768 <__fp_zero>:
 768:	e8 94       	clt

0000076a <__fp_szero>:
 76a:	bb 27       	eor	r27, r27
 76c:	66 27       	eor	r22, r22
 76e:	77 27       	eor	r23, r23
 770:	cb 01       	movw	r24, r22
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret

00000776 <__mulsf3>:
 776:	0e 94 ce 03 	call	0x79c	; 0x79c <__mulsf3x>
 77a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_round>
 77e:	0e 94 31 04 	call	0x862	; 0x862 <__fp_pscA>
 782:	38 f0       	brcs	.+14     	; 0x792 <__mulsf3+0x1c>
 784:	0e 94 38 04 	call	0x870	; 0x870 <__fp_pscB>
 788:	20 f0       	brcs	.+8      	; 0x792 <__mulsf3+0x1c>
 78a:	95 23       	and	r25, r21
 78c:	11 f0       	breq	.+4      	; 0x792 <__mulsf3+0x1c>
 78e:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>
 792:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_nan>
 796:	11 24       	eor	r1, r1
 798:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>

0000079c <__mulsf3x>:
 79c:	0e 94 92 03 	call	0x724	; 0x724 <__fp_split3>
 7a0:	70 f3       	brcs	.-36     	; 0x77e <__mulsf3+0x8>

000007a2 <__mulsf3_pse>:
 7a2:	95 9f       	mul	r25, r21
 7a4:	c1 f3       	breq	.-16     	; 0x796 <__mulsf3+0x20>
 7a6:	95 0f       	add	r25, r21
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	55 1f       	adc	r21, r21
 7ac:	62 9f       	mul	r22, r18
 7ae:	f0 01       	movw	r30, r0
 7b0:	72 9f       	mul	r23, r18
 7b2:	bb 27       	eor	r27, r27
 7b4:	f0 0d       	add	r31, r0
 7b6:	b1 1d       	adc	r27, r1
 7b8:	63 9f       	mul	r22, r19
 7ba:	aa 27       	eor	r26, r26
 7bc:	f0 0d       	add	r31, r0
 7be:	b1 1d       	adc	r27, r1
 7c0:	aa 1f       	adc	r26, r26
 7c2:	64 9f       	mul	r22, r20
 7c4:	66 27       	eor	r22, r22
 7c6:	b0 0d       	add	r27, r0
 7c8:	a1 1d       	adc	r26, r1
 7ca:	66 1f       	adc	r22, r22
 7cc:	82 9f       	mul	r24, r18
 7ce:	22 27       	eor	r18, r18
 7d0:	b0 0d       	add	r27, r0
 7d2:	a1 1d       	adc	r26, r1
 7d4:	62 1f       	adc	r22, r18
 7d6:	73 9f       	mul	r23, r19
 7d8:	b0 0d       	add	r27, r0
 7da:	a1 1d       	adc	r26, r1
 7dc:	62 1f       	adc	r22, r18
 7de:	83 9f       	mul	r24, r19
 7e0:	a0 0d       	add	r26, r0
 7e2:	61 1d       	adc	r22, r1
 7e4:	22 1f       	adc	r18, r18
 7e6:	74 9f       	mul	r23, r20
 7e8:	33 27       	eor	r19, r19
 7ea:	a0 0d       	add	r26, r0
 7ec:	61 1d       	adc	r22, r1
 7ee:	23 1f       	adc	r18, r19
 7f0:	84 9f       	mul	r24, r20
 7f2:	60 0d       	add	r22, r0
 7f4:	21 1d       	adc	r18, r1
 7f6:	82 2f       	mov	r24, r18
 7f8:	76 2f       	mov	r23, r22
 7fa:	6a 2f       	mov	r22, r26
 7fc:	11 24       	eor	r1, r1
 7fe:	9f 57       	subi	r25, 0x7F	; 127
 800:	50 40       	sbci	r21, 0x00	; 0
 802:	9a f0       	brmi	.+38     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 804:	f1 f0       	breq	.+60     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 806:	88 23       	and	r24, r24
 808:	4a f0       	brmi	.+18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	bb 1f       	adc	r27, r27
 810:	66 1f       	adc	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	91 50       	subi	r25, 0x01	; 1
 818:	50 40       	sbci	r21, 0x00	; 0
 81a:	a9 f7       	brne	.-22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 81c:	9e 3f       	cpi	r25, 0xFE	; 254
 81e:	51 05       	cpc	r21, r1
 820:	80 f0       	brcs	.+32     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 822:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>
 826:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>
 82a:	5f 3f       	cpi	r21, 0xFF	; 255
 82c:	e4 f3       	brlt	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	98 3e       	cpi	r25, 0xE8	; 232
 830:	d4 f3       	brlt	.-12     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 832:	86 95       	lsr	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f7 95       	ror	r31
 83c:	e7 95       	ror	r30
 83e:	9f 5f       	subi	r25, 0xFF	; 255
 840:	c1 f7       	brne	.-16     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 842:	fe 2b       	or	r31, r30
 844:	88 0f       	add	r24, r24
 846:	91 1d       	adc	r25, r1
 848:	96 95       	lsr	r25
 84a:	87 95       	ror	r24
 84c:	97 f9       	bld	r25, 7
 84e:	08 95       	ret

00000850 <__fp_inf>:
 850:	97 f9       	bld	r25, 7
 852:	9f 67       	ori	r25, 0x7F	; 127
 854:	80 e8       	ldi	r24, 0x80	; 128
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	08 95       	ret

0000085c <__fp_nan>:
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	80 ec       	ldi	r24, 0xC0	; 192
 860:	08 95       	ret

00000862 <__fp_pscA>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	09 06       	cpc	r0, r25
 86e:	08 95       	ret

00000870 <__fp_pscB>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	14 06       	cpc	r1, r20
 87a:	05 06       	cpc	r0, r21
 87c:	08 95       	ret

0000087e <__fp_round>:
 87e:	09 2e       	mov	r0, r25
 880:	03 94       	inc	r0
 882:	00 0c       	add	r0, r0
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0xc>
 886:	88 23       	and	r24, r24
 888:	52 f0       	brmi	.+20     	; 0x89e <__fp_round+0x20>
 88a:	bb 0f       	add	r27, r27
 88c:	40 f4       	brcc	.+16     	; 0x89e <__fp_round+0x20>
 88e:	bf 2b       	or	r27, r31
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0x18>
 892:	60 ff       	sbrs	r22, 0
 894:	04 c0       	rjmp	.+8      	; 0x89e <__fp_round+0x20>
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	08 95       	ret

000008a0 <_exit>:
 8a0:	f8 94       	cli

000008a2 <__stop_program>:
 8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <__stop_program>
